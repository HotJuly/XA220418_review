1.key值的使用方法
	通过某个状态数据遍历出多个节点的时候,需要给每个节点都添加一个唯一标识key属性

2.常用作key值的数据
	1.遍历得到的内容身上的唯一标识,例如:id
	2.遍历得到的下标,例如:index
	3.遍历得到的数据本身,前提是数据是基本数据类型

3.key值的作用
	可以优化提升diff算法
	当遍历的数据发生变化的时候,组件会生成新的虚拟DOM树,并与旧的虚拟DOM树进行比较,最终找到可以复用的DOM对象,进行复用

	first render:
		1.将模版解析成为render函数
		2.将当前的数据传入render中,生成虚拟DOM树
		3.根据虚拟DOM树生成真实DOM树
		4.将真实DOM树替换掉页面上的el元素(挂载)
		5.最终GUI线程根据最新的DOM树,绘制内容到页面上

		注意:首次渲染中,没有diff算法参与

	update render:
		1.将最新的数据传入render中,生成全新的虚拟DOM树
		2.对比新旧虚拟DOM树,找到可以复用的真实DOM,进行复用
		3.如果没有可以复用的真实DOM,根据最新的虚拟DOM创建全新的真实DOM
		4.将最新的真实DOM树,替换掉当前组件对应的区域
		5.GUI线程根据最新的DOM树,绘制内容到页面上

		注意:流程2,3,4就是所谓的diff算法
			diff算法出现的目的,就是为了解决Vue2范围更新中出现的误杀情况
			diff算法只能同级比较,不会跨级比较(否则性能会有问题)

4.使用下标作为key值,可能出现什么问题?
	只要不修改遍历数据,那么其实用下标作为key值也不会出现问题
		因为首次渲染中没有diff算法参与,所以key值没有用

	input案例
		在这个案例中,diff算法生效了,找到了可以复用的节点进行复用,复用错了
			key和节点以及数据的对应关系出现了问题

		其实主要的原因是因为比较规则中,将有数据的input框和没有数据的input框当成了同一个东西,导致复用错误

	商品排序案例
		在这个案例中,diff算法有比较虚拟DOM,但是没有复用成功,所有的节点全部创建全新的
			此时diff算法不仅没有优化性能,反而劣化性能

5.使用唯一标识作为key的好处
	只要服务器的数据不发生变化,那么我们前端的真实DOM就可以一直复用下去




	